// define a variable to import the <Verifier> or <renamedVerifier> solidity contract generated by Zokrates
var SquareVerifier = artifacts.require('Verifier');

const proofJson = require('./proof');
const proof = proofJson.proof;
const input = proofJson.input;

console.log(proof);
console.log(input);

contract('SquareVerifier', accounts => {

    const account_one = accounts[0];

    before(async function () {
        this.contract = await SquareVerifier.new({from: account_one});
    })

    // Test verification with correct proof
    // - use the contents from proof.json generated from zokrates steps
    it(' Test verification with correct proof', async function () {

        let result = await this.contract.verifyTx.call(
            proof.A,
            proof.A_p,
            proof.B,
            proof.B_p,
            proof.C,
            proof.C_p,
            proof.H,
            proof.K,
            input,
            {from: account_one}
        );
        assert.equal(result, true, "Error: Verification with correct proof");

    })
    
    // Test verification with incorrect proof
    it(' Test verification with incorrect proof', async function () { 
        
        // Takend from proof_inccorect.json
        let incorrectProof = ["0x2f5e0f11d87e6225615899524a3b111de1164aad4877341a381711aaafbbe36f", "0x1a4e52eae83d1c8c4541a5133936e34e22a4418e8bc2290b27e55a4c29f50a1f"];
        let result = await this.contract.verifyTx.call(
            proof.A,
            incorrectProof, //proof.A_p,
            proof.B,
            proof.B_p,
            proof.C,
            proof.C_p,
            proof.H,
            proof.K,
            input,
            {from: account_one}
        );
        assert.equal(result, false, "Error: Verification with incorrect proof");

    })
})
